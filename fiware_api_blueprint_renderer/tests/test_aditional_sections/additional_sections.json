{
    "context_registrations": "<p>(placeholder for describing what a context registration is and what it is used for)</p>", 
    "context_attributes": "<p>Context attributes are properties of context entities.\nFor example, the current speed of a car could be modeled as\nattribute <em>current_speed</em> of entity <em>car-104</em>.</p>\n<p>In the NGSI data model, attributes have an <em>attribute name</em>,\nan <em>attribute type</em>, an <em>attribute value</em> and <em>metadata</em>. \n * The attribute name describes which kind of property of the entity the attribute value represents, for example <em>current_speed</em>.\n * The attribute type represents the NGSI value type of the attribute value. Note that FIWARE NGSI has its own type system for\n attribute values, so NGSI value types are not the same as JSON types.\n * The attribute value finally contains\n  * the actual data\n  * optional <strong>metadata</strong> describing properties of the attribute value like e.g. accuracy, provider, or a timestamp</p>", 
    "context_metadata": "<p>Context metadata is used in FIWARE NGSI at several places, one of\nthem being an optional part of the attribute value as described\nabove. Similarly to attributes, each piece of metadata has \n * <strong>a metadata name</strong>, describing the role of the metadata at the\n place where it occurs; for example, the metadata name <em>accuracy</em> \n indicates that the metadata value describes how accurate a given \n attribute value is\n * a <strong>metadata type</strong>, describing the NGSI value type of the metadata value\n * a <strong>metadata value</strong> containing the actual metadata</p>\n<p>Note that in NGSI it is not forseen that metadata values can\nthemselves have metadata.</p>", 
    "json_entity_representation": "<p>An entity is represented by a a JSON object which contain the following properties:</p>\n<ul>\n<li><code>id</code> for the entity ID, represented by a JSON string. If the entity has an <code>id</code> attribute itself it will be ignored.</li>\n<li><code>type</code> for the entity type, represented by a JSON string. If the entity has a <code>type</code> attribute itself it will be ignored.\n  If the entity doesn't have a type, then this property is not included.</li>\n<li>A collection of properties, one per entity attribute. Properties representing attributes with no metadata\n  or type are rendered as regular JSON values. Properties representing attributes which specify a type or include\n  metadata are rendered as JSON objects with the following properties:</li>\n<li><code>value</code>: for the attribute value, rendered as a regular JSON value (string, number or boolean), object or array.</li>\n<li><code>type</code>: a JSON string which represents the user-defined NGSI attribute type.</li>\n<li>A collection of properties one per metadata field associated to the attribute value. Metadata properties follow\n    the same representation rules that applies to properties which represent attributes (except that a metadata\n    cannot have metadata properties).</li>\n</ul>", 
    "exchanging_context_availability_information": "<p>(placeholder on some introduction of what context availability information is)</p>", 
    "acknowledgements": "<p>The editors would like to express their gratitude to the following people who actively contributed to this specification:\nJuan Jos\u00e9 Hierro, Marcos Reyes, Ken Gunnar, Antonio L\u00f3pez, ... </p>", 
    "special_attribute_types": "<p>Generally speaking, user-defined attribute types are informative, they are processed by the NGSIv2 server in\nan opaque way. Nonetheless, the types described below are used to convey an special meaning</p>\n<ul>\n<li><code>date</code>:  identifies dates, in ISO8601 format. These attributes can be used with the\n  greater than, lesser than, greater or equal, lesser or equal and range query operators. Eg:</li>\n</ul>\n<pre><code>{\n    &quot;timestamp&quot;: {\n        &quot;value&quot;: &quot;2017-06-17T07:21:24.238Z&quot;,\n        &quot;type&quot;: &quot;date&quot;\n    }\n}\n</code></pre>\n\n<ul>\n<li><code>geo:point</code>: identifies the location of the entity in geo-location queries. If an entity have several attributes\n  of this type all them define a possible location for the entity from a geo-location query point of view. (TBD:\n  check feasibility).</li>\n</ul>\n<pre><code>{\n    &quot;location&quot;: {\n        &quot;value&quot;: &quot;41.3763726, 2.1864475, 14&quot;,\n        &quot;type&quot;: &quot;geo:point&quot;\n    }\n}\n</code></pre>", 
    "copyright": "<p>Copyright - Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed lacinia, nisl non tristique sollicitudin, nisl lectus finibus erat, a mattis orci turpis non nunc. Maecenas convallis diam odio, vel blandit turpis varius at. Duis hendrerit lectus non viverra vehicula. Nunc eu eros nec nisl facilisis commodo. Nam at dui arcu. Quisque vitae augue metus. Sed quis consequat lacus. Duis sed eros rhoncus, fringilla mauris ut, interdum orci. Cras sodales facilisis luctus. Quisque fringilla tincidunt sapien at iaculis. Phasellus tempus a enim ac volutpat. Ut tincidunt fermentum massa quis sagittis. Ut non scelerisque risus, a dignissim odio.</p>", 
    "introduction": "<p>The FIWARE NGSI (Next Generation Service Interface) API defines: </p>\n<ul>\n<li>a <strong>data model</strong> for context information, based on a simple information model using the notion of <em>context entities</em></li>\n<li>a <strong>context data interface</strong> for exchanging information by means of query, subscription, and update operations</li>\n<li>a <strong>context availability interface</strong> for exchanging information on how to obtain context information\n(whether to separate the two interfaces is currently under discussion).</li>\n<li>a set of typical <strong>roles</strong> played by NGSI-compliant components</li>\n</ul>", 
    "specification": "", 
    "editors": "<ul>\n<li>Jos\u00e9 Manuel Cantera Fonseca, Telef\u00f3nica I+D</li>\n<li>Ferm\u00edn Gal\u00e1n, Telef\u00f3nica I+D. </li>\n<li>Tobias Jacobs, NEC</li>\n</ul>", 
    "error_responses": "<p>In the case of being present, the error payload is JSON object including the following fields:</p>\n<ul>\n<li><code>error</code> (mandatory): a textual description of the error.</li>\n<li><code>description</code> (optional): additional information about the error.</li>\n</ul>\n<p>Error list (HTTP response code in paranthesis):</p>\n<ul>\n<li>ParseError (400). The incoming JSON payload is incorrect.</li>\n<li>BadRequest (400). The incoming request is somehow invalid.</li>\n<li>NotFound (404). The context element referred in the request has not been found.</li>\n<li>TooManyResults (409). There are several results that match with the resource identification used\n  in the request. This typically the case of requesting an entity with not enough information and the\n  solution is to enhance entity identification adding more information, e.g. adding entity type\n  and/or service path.</li>\n</ul>", 
    "canonical_format_description": "<p>This is a variant of the represention format aimed at clients that need a regular representation of the entities\nand attributes, that can be used in the operations that support the <code>canonical</code> option.</p>\n<ul>\n<li>Entity <code>type</code> is mandatory. If the entity has no type, JSON <code>null</code> is used.</li>\n<li>Property <code>attrs</code> is mandatory and includes a JSON object for the attributes.</li>\n<li>Each attribute is described always with <code>value</code>, <code>type</code> and <code>metadata</code>. All fields are mandatory (attributes\n  without type use JSON <code>null</code> for that property).</li>\n<li>Each metadata is described always with <code>value</code> and <code>type</code>. Both fields are mandatory (metadata\n  without type use JSON <code>null</code> for that property).</li>\n</ul>\n<pre><code>{\n  &quot;type&quot;: &quot;Room&quot;,\n  &quot;id&quot;: &quot;Boe_Idearium&quot;,\n  &quot;attrs&quot;: {\n    &quot;speed&quot;: {\n      &quot;value&quot;: 88,\n      &quot;type&quot;: null,\n      &quot;metadata&quot;: { }\n    },\n    &quot;pressure&quot;: {\n      &quot;value&quot;: 12.1,\n      &quot;type&quot;: null,\n      &quot;metadata&quot;: { }\n    },\n    &quot;temperature&quot;: {\n      &quot;value&quot;: 22,\n      &quot;type&quot;: &quot;urn:phenomenum:temperature&quot;,\n      &quot;metadata&quot;: { }\n    },\n    &quot;colour&quot;: {\n      &quot;value&quot;: &quot;black&quot;,\n      &quot;type&quot;: &quot;myString&quot;,\n      &quot;metadata&quot;: { }\n    }\n  }\n}\n</code></pre>", 
    "conformance": "<p>All the interfaces described by this specification are mandatory and must be implemented in order to be compliant with. </p>", 
    "status": "<p>This is a work in progress and is changing on a daily basis.\nPlease send your comments to fiware-ngsi@lists.fiware.org. You can\ntrace the discussions checking the archives of the mailing list:\n<a href=\"https://lists.fiware.org/private/fiware-ngsi/\">https://lists.fiware.org/private/fiware-ngsi/</a> (list subscription\nrequired).</p>\n<p>In addition, note that a list of currently open discussions is available at</p>\n<ul>\n<li><a href=\"https://github.com/telefonicaid/fiware-orion/issues/1022\">https://github.com/telefonicaid/fiware-orion/issues/1022</a></li>\n<li><a href=\"https://github.com/telefonicaid/fiware-orion/issues/1034\">https://github.com/telefonicaid/fiware-orion/issues/1034</a></li>\n<li><a href=\"https://github.com/telefonicaid/fiware-orion/issues/1035\">https://github.com/telefonicaid/fiware-orion/issues/1035</a></li>\n</ul>\n<p>This specification is licensed under the <a href=\"http://forge.fiware.org/plugins/mediawiki/wiki/fiware/index.php/FI-WARE_Open_Specification_Legal_Notice_%28essential_patents_license%29\">FIWARE Open Specification License</a>.</p>", 
    "registering_context_availability_information": "<p>(placeholder for describing the operation of registering context)</p>", 
    "roles_of_fiware_ngsi_components": "<p>(placeholder to describe roles like context provider, context producer,\ncontext broker, context registry, context consumer)</p>", 
    "context_updates": "<p>(placeholder for describing updates)</p>", 
    "context_availability_subscription": "<p>(placeholder for describing context availability subscriptions)</p>", 
    "context_discovery": "<p>(placehoder for describing what discovery does)</p>", 
    "context_entities": "<p>Context entities, or simply called entities, are the center of gravity\nin the FIWARE NGSI information model. An entity represents a\nreal-world object like e.g. a sensor, a person, or a room. Each entity\nis uniquely identified by its <strong>entity id</strong>. </p>\n<p>Furthermore, the type system of FIWARE NGSI enables entities to have \nan <strong>entity type</strong>. Entity types are semantic types; they are intended\nto describe the type of real-world object represented by the entity.\nFor example, a context entity with id <em>sensor-365</em> could have the\ntype <em>temperatureSensor</em>.</p>", 
    "context_elements": "<p><em>(Note: the distinction between context entities and context elements \nis still under discussion; therefore the notion of context elements\ncurrently only appears in this section.)</em></p>\n<p>A context element is a data object (e.g. JSON object; see the section\non JSON representation below) which contains information about a\nspecific context entity. Consequently, a context element has a\nmandatory property <code>id</code> in order to identify the context entity it\nrefers to. It furthermore can contain an optional property <code>type</code>\nto describe the type of the entity. Further properties can be used\nto represent more information about the entity (see the <strong>context\nattributes</strong> section below).</p>\n<p>It is important to understand that the relationship of entity and context element is one-to-many. This means that \n<em> each context element refers to exactly one entity\n</em> there can be several context elements  referring to the same entity. The context elements can for example contain\ndifferent pieces of information about the entity</p>", 
    "fiware-ngsi_v2_specification": "", 
    "restrictions_and_operation_scopes": "<p>(placeholder to describe restrictions and operation scopes)</p>", 
    "simple_query_language": "<p>Each statement express a matching condition. The result of the query is the match on each one of the statements, e.g. a\nAND logical condition among the different statements. There are two kind of statements: <em>unary statements</em> and\n<em>binary staments</em>.</p>\n\n<p>Binary statements are composed by an attribute name (e.g. \"temperature\"), operator and value (which format\ndepends on the operator), e.g.:</p>\n\n<p><code>\ntemperature==50<br/>\ntemperature&lt;=20\n</code></p>\n\n<p>The list of operators (and the format of the values they use) is as follows:</p>\n\n<ul>\n  <li>Equal: <code>==</code>. It accepts the following values:\n    <ul>\n      <li>Single element, e.g. <code>temperature==40</code>. It matches entities whose attribute value\n      that exact value.</li>\n      <li>A list of comma-separated values, e.g. <code>color==black,red</code>. It matches entities whose\n      attribute value is one of the values (OR clause). Eg. entities which <code>color</code> is set to\n      <code>black</code> will match, while entities which <code>color</code> is set to <code>white</code>\n      will not match.</li>\n      <li>A range, specified as a minimum and maximum separated by <code>..</code>. It match if\n      the value is in the interval between the minimum and the maximum (both included). It can only be used\n      with attributes which contain dates or numbers. E.g. <code>temperature==10..20</code> matchs if the\n      temperature is greater or equal than 10 and lower or equal than 20.</li>\n    </ul>\n  </li>\n  <li>Unequal: <code>!=</code>. It accepts the following values:\n    <ul>\n      <li>The value is a single element, e.g. <code>temperature!=40</code>. It matches entities whose attribute\n      value is not that exact value.</li>\n      <li>A list of comma-separated values, e.g. <code>color!=black,red</code>. It matches entities whose\n      attribute value is not any of the values (AND clause). Eg. entities whose <code>color</code> is set\n      to <code>black</code> will not match, while entities whose <code>color</code> is set to\n      <code>white</code> match.</li>\n      <li>A range, specified as a minimum and maximum separated by <code>..</code>. It match\n      if the value is not in the interval between the minimum and the maximum (both included). It can only\n      be used with attributes which contain dates or numbers. E.g. <code>temperature!=10..20</code>matchs if\n      the temperature is lower than 10 or greater than 20 (it will not match if the tempeature is 10 or the\n      temperature is 20).</li>\n    </ul>\n  </li>\n  <li>Greater than: <code>&gt;</code>. The value is a single element, e.g. <code>temperature&gt;40</code>. It\n  matches entities which attribute value is strictly greater than that value. It only makes sense when\n  used with attributes which contain dates or numbers (using with attributes of other type might lead to\n  unexpected results).</li>\n  <li>Lesser than: <code>&lt;</code>. The value is a single element, e.g. <code>temperature&lt;40</code>. It\n  matches entities which attribute value is strictly lesser than that value. It only makes sense when\n  used with attributes which contain dates or numbers (using with attributes of other type might lead to\n  unexpected results).</li>\n  <li>Greater or equal than: <code>&gt;=</code>. The value is a single element, e.g. <code>temperature&gt;=40</code>.\n  It matches entities which attribute value is greater than or equal to that value. It only makes sense when\n  used with attributes which contain dates or numbers (using with attributes of other type might lead to\n  unexpected results).</li>\n  <li>Lesser or equal than: <code>&lt;=</code>. The value is a single element, e.g. <code>temperature&lt;=40</code>. It\n  matches entities which attribute value is lesser than or equal to that value. It only makes sense when\n  used with attributes which contain dates or numbers (using with attributes of other type might lead to\n  unexpected results).</li>\n</ul>\n\n<p>In the case of equal or inequal, if the value to match include a <code>,</code>, you can use simple quote\n(<code>'</code>), e.g: <code>color=='light,green','deep,blue'</code>.</p>\n\n<p>Unary statements are composed of a unary operator (either <code>+</code>or <code>-</code>) and are used in two situations:</p>\n\n<ul>\n  <li>To check for attribute existence. E.g. <code>+temperature</code>matches entities which have\n  a temperature attribute (no matter its value), while <code>-temperature</code>matches entities which don't have\n  a temperature attribute.</li>\n  <li>To check for entity type existence, with the <code>type</code>keyword. E.g, <code>-type</code>\n  matches entities which don't have a type.</li>\n</ul>\n\n<p> In particular, the following geometries can be defined so far:</p>\n\n<ul>\n  <li><code>geometry=circle;radius:4000</code>, inside a circle (radius is in meters).</li>\n  <li><code>geometry=circle;radius:4000;external</code>, outside a circle (radius is in meters).</li>\n  <li><code>geometry=polygon</code>, inside a polygon.</li>\n  <li><code>geometry=polygon;external</code>, outside a polygon.</li>\n</ul>\n\n<ul>\n  <li>In the case of <code>circle</code>geometry, the parameter includes just one element, which\n  is the center of the circle.</li>\n  <li>In the case of <code>polygon</code>includes a list of elements, which are the vertices of\n  the polygon.</li>\n</ul>\n\n<p>The response payload is an Array which contains one object per matching entity. Each entity follows\nthe JSON entity representation format (described in a section above).</p>", 
    "context_queries": "<p>(placeholder for describing what a context query is, and some hints on how this\nis typically done in the REST interface)</p>", 
    "context_subscriptions": "<p>(placeholder for describing the concept of context subscriptions)</p>", 
    "terminology": ""
}