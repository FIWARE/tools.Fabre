import unittest
from os import path
import os
import shutil
import sys
import json
from subprocess import Popen, PIPE, call
import pprint
from lxml import etree, objectify
from lxml.cssselect import CSSSelector
import pprint
from pyquery import PyQuery as pq

import_path = path.abspath(__file__)

while path.split(import_path)[1] != 'fiware_api_blueprint_renderer':

    import_path = path.dirname(import_path)

sys.path.append(import_path)

from src.drafter_postprocessing.order_uri import  order_uri_parameters, order_request_parameters
from tests.test_utils import *


class TestUniqueID(unittest.TestCase):
    __metaclass__ = TestCaseWithExamplesMetaclass
    
    @classmethod
    def setUpClass(cls):
        pathname_ = path.dirname(path.abspath(__file__))
        cls.apib_file = pathname_+"/api_test.apib"
        cls.tmp_result_files = "/var/tmp/test-links-in-reference-160faf1aae1dd41c8f16746ea744f138"

        cls.html_output = cls.tmp_result_files+"api_test.html"

        if os.path.exists(cls.tmp_result_files):
            shutil.rmtree(cls.tmp_result_files)

        os.makedirs(cls.tmp_result_files)

        Popen(["fabre", "-i", cls.apib_file, "-o", 
             cls.tmp_result_files, "--no-clear-temp-dir"], stdout=PIPE, stderr=PIPE).communicate()

        parser = etree.HTMLParser()
        cls.tree = etree.parse(""+cls.tmp_result_files+"/api_test.html", parser)
        cls.pq = pq(filename = cls.tmp_result_files+"/api_test.html")

        with open('/var/tmp/fiware_api_blueprint_renderer_tmp/api_test.json', 'r') as f:
            cls.out_json = json.load(f)

    @classmethod
    def tearDownClass(cls):
        if os.path.exists(cls.tmp_result_files):
            shutil.rmtree(cls.tmp_result_files)

        to_delete = ['/var/tmp/fiware_api_blueprint_renderer_tmp/api_test.apib',
                     '/var/tmp/fiware_api_blueprint_renderer_tmp/api_test.extras',
                     '/var/tmp/fiware_api_blueprint_renderer_tmp/api_test.json']

        for filename in to_delete:
            if os.path.exists(filename):
                os.remove(filename)
        
    
    def test_duplicate_ids(self):

        ids = []
        count = 0
        all_elements = self.pq("*")
        for element in all_elements:
            count = count + 1
            if pq(element).attr["id"]  is  None:
               continue
            assert pq(element).attr["id"] not in ids
            if pq(element).attr["id"]  is not None:
                ids.append(pq(element).attr["id"])


suite = unittest.TestLoader().loadTestsFromTestCase(TestUniqueID)
unittest.TextTestRunner(verbosity=2).run(suite)