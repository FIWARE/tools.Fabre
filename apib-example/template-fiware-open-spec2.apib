FORMAT: 1A
HOST: http://example.fiware.org/
TITLE: Example GE Open API Specification
DATE: 15 July 2015

# Example GE API Open Specification

This specification defines a FIWARE GE as an example. Put here an abstract that outlines its purpose. 

## Editors

  1. José Manuel Cantera Fonseca, Telefónica I+D
  2. John Doe, ACME Inc. 
  
  
## Contributors

  1. Miguel Carrillo, Telefónica I+D
  
## Acknowledgements

The editors would like to express their gratitude to ... who actively contributed to this specification. 


## Versions

  + This Version: http://
  + Previous version: http://
  + Latest version: http://
  

## Status

Some boilerplate text regarding the status of the document, Licenses (automatically included),
mailing list to be contacted for support etc. 

## Conformance

Put here the criteria that must be met to declare an implementation conformant to this spec. 

# Specification

This section is intended to describe the main concepts, constructs, data structures etc. used by your specification.

## Introduction

This is the example spec of a FIWARE GE.

| a1 | b1 | c1 | d1 |
|----|----|----|----|
| a2 | b2 | c2 | d2 |
| a3 | b3 | c3 | d3 |

## Terminology

## Concepts

## Data Structures

### Choice (object)
    + choice (string) - Text
    + url (string) - Choice URL
    + votes (number) - Number of votes

### Question (object)
      + question (string) - Text of the question
      + published_at (string) - An ISO8601 date when the question was published.
      + url (string, required) - URL 
      + choices (array[Choice]) - An array of Choice objects.

# REST API

# Group Root

## Polls API [/]

This resource does not have any attributes. Instead it offers the initial
API affordances in the form of the links in the JSON body.

It is recommend to follow the “url” link values,
[Link](https://tools.ietf.org/html/rfc5988) or Location headers where
applicable to retrieve resources. Instead of constructing your own URLs,
to keep your client decoupled from implementation details.

### Retrieve the Entry Point [GET]

Put here any wording concerning the description of the operation. 

+ Attributes
    
    + questions_url (string) - URL of the main API resource

+ Response 200 (application/json)

        {
            "questions_url": "/questions"
        }

# Group Question

Resources related to questions in the API.

## Question Data [/questions/{question_id}]

This resource represents a question

+ Parameters
    + question_id: 1 (required, number) - ID of the Question in form of an integer

+ Attributes (Question)

### View a Questions Detail [GET]

It allows to obtain question data. 

+ Response 200 (application/json)

        {
            "question": "Favourite programming language?",
            "published_at": "2014-11-11T08:40:51.620Z",
            "url": "/questions/1",
            "choices": [
                {
                    "choice": "Swift",
                    "url": "/questions/1/choices/1",
                    "votes": 2048
                }, {
                    "choice": "Python",
                    "url": "/questions/1/choices/2",
                    "votes": 1024
                }, {
                    "choice": "Objective-C",
                    "url": "/questions/1/choices/3",
                    "votes": 512
                }, {
                    "choice": "Ruby",
                    "url": "/questions/1/choices/4",
                    "votes": 256
                }
            ]
        }

## Choice Resource [/questions/{question_id}/choices/{choice_id}]

This resource reqresents question's choices. 

+ Parameters
    + question_id: 1 (required, number) - ID of the Question in form of an integer
    + choice_id: 1 (required, number) - ID of the Choice in form of an integer

+ Attributes (Choice)

### Vote on a Choice [POST]

This action allows you to vote on a question's choice.

+ Response 201

    + Headers

            Location: /questions/1

## Questions Collection [/questions]

This resource represents the collection of questions. 

### List All Questions [GET /questions{?options,page}]

+ Parameters
    + page: 1 (optional, number) - The page of questions to return
        + Default: 1
    + options: json (optional, string) - Options modifier
        + Members
            + text - Response as text
            + json - Response as JSON

+ Response 200 (application/json)

    + Headers

            Link: </questions?page=2>; rel="next"

    + Body

            [
                {
                    "question": "Favourite programming language?",
                    "published_at": "2014-11-11T08:40:51.620Z",
                    "url": "/questions/1",
                    "choices": [
                        {
                            "choice": "Swift",
                            "url": "/questions/1/choices/1",
                            "votes": 2048
                        }, {
                            "choice": "Python",
                            "url": "/questions/1/choices/2",
                            "votes": 1024
                        }, {
                            "choice": "Objective-C",
                            "url": "/questions/1/choices/3",
                            "votes": 512
                        }, {
                            "choice": "Ruby",
                            "url": "/questions/1/choices/4",
                            "votes": 256
                        }
                    ]
                }
            ]

### Create a New Question [POST]

You may create your own question using this action. It takes a JSON
object containing a question and a collection of answers in the
form of choices.


Example table

| c1   | c2   | c3   | c4   | c5   |
|------|------|------|------|------|
| c1f1 | c2f1 | c3f1 | c4f1 | c5f1 |
| c1f2 | c2f2 | c3f2 | c4f2 | c5f2 |
| c1f3 | c2f3 | c3f3 | c4f3 | c5f3 |

+ Request (application/json)

    + Attributes (object)
      + question (string, required) - The text of the question
      + choices (array[string]) - A collection of choices.
    
    + Body
    
            {
                "question": "Favourite programming language?",
                "choices": [
                    "Swift",
                    "Python",
                    "Objective-C",
                    "Ruby"
                ]
            }

+ Response 201 (application/json)

    + Attributes (Question)
    
    + Headers

            Location: /questions/2

    + Body

            {
                "question": "Favourite programming language?",
                "published_at": "2014-11-11T08:40:51.620Z",
                "url": "/questions/2",
                "choices": [
                    {
                        "choice": "Swift",
                        "url": "/questions/2/choices/1",
                        "votes": 0
                    }, {
                        "choice": "Python",
                        "url": "/questions/2/choices/2",
                        "votes": 0
                    }, {
                        "choice": "Objective-C",
                        "url": "/questions/2/choices/3",
                        "votes": 0
                    }, {
                        "choice": "Ruby",
                        "url": "/questions/2/choices/4",
                        "votes": 0
                    }
                ]
            }

+ Response 409 (application/json)

            {
              "error": "CannotProceed",
              "description": "Unknown"
            }
